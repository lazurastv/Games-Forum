/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UserAdd,
    UserAddFromJSON,
    UserAddToJSON,
    UserCredentialsUpdate,
    UserCredentialsUpdateFromJSON,
    UserCredentialsUpdateToJSON,
    UserRoleUpdate,
    UserRoleUpdateFromJSON,
    UserRoleUpdateToJSON,
    UserVM,
    UserVMFromJSON,
    UserVMToJSON,
} from '../models';

export interface DeleteRequest {
    id: number;
}

export interface AddRequest {
    userAdd: UserAdd;
}

export interface AddUserImageRequest {
    userId: number;
    image: Blob;
}

export interface BanUserRequest {
    id: number;
}

export interface ConfirmRegistrationRequest {
    token: string;
}

export interface GetByEmailRequest {
    email: string;
}

export interface GetByIdRequest {
    id: number;
}

export interface GetByUsernameRequest {
    username: string;
}

export interface UnbanUserRequest {
    id: number;
}

export interface UpdateCredentialsRequest {
    id: number;
    userCredentialsUpdate: UserCredentialsUpdate;
}

export interface UpdateRoleRequest {
    id: number;
    userRoleUpdate: UserRoleUpdate;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling _delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this._deleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addRaw(requestParameters: AddRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userAdd === null || requestParameters.userAdd === undefined) {
            throw new runtime.RequiredError('userAdd','Required parameter requestParameters.userAdd was null or undefined when calling add.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserAddToJSON(requestParameters.userAdd),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async add(requestParameters: AddRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addRaw(requestParameters, initOverrides);
    }

    /**
     */
    async addUserImageRaw(requestParameters: AddUserImageRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling addUserImage.');
        }

        if (requestParameters.image === null || requestParameters.image === undefined) {
            throw new runtime.RequiredError('image','Required parameter requestParameters.image was null or undefined when calling addUserImage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.image !== undefined) {
            formParams.append('image', requestParameters.image as any);
        }

        const response = await this.request({
            path: `/api/user/upload-profile-picture/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addUserImage(requestParameters: AddUserImageRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addUserImageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async banUserRaw(requestParameters: BanUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling banUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{id}/ban`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async banUser(requestParameters: BanUserRequest, initOverrides?: RequestInit): Promise<void> {
        await this.banUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async confirmRegistrationRaw(requestParameters: ConfirmRegistrationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling confirmRegistration.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/regitrationConfirm/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async confirmRegistration(requestParameters: ConfirmRegistrationRequest, initOverrides?: RequestInit): Promise<string> {
        const response = await this.confirmRegistrationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllUsersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserVM>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserVMFromJSON));
    }

    /**
     */
    async getAllUsers(initOverrides?: RequestInit): Promise<Array<UserVM>> {
        const response = await this.getAllUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getByEmailRaw(requestParameters: GetByEmailRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserVM>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getByEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVMFromJSON(jsonValue));
    }

    /**
     */
    async getByEmail(requestParameters: GetByEmailRequest, initOverrides?: RequestInit): Promise<UserVM> {
        const response = await this.getByEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserVM>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVMFromJSON(jsonValue));
    }

    /**
     */
    async getById(requestParameters: GetByIdRequest, initOverrides?: RequestInit): Promise<UserVM> {
        const response = await this.getByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getByUsernameRaw(requestParameters: GetByUsernameRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserVM>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getByUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/username/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVMFromJSON(jsonValue));
    }

    /**
     */
    async getByUsername(requestParameters: GetByUsernameRequest, initOverrides?: RequestInit): Promise<UserVM> {
        const response = await this.getByUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSessionUserRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<UserVM>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/session`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserVMFromJSON(jsonValue));
    }

    /**
     */
    async getSessionUser(initOverrides?: RequestInit): Promise<UserVM> {
        const response = await this.getSessionUserRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async unbanUserRaw(requestParameters: UnbanUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unbanUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/user/{id}/unban`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async unbanUser(requestParameters: UnbanUserRequest, initOverrides?: RequestInit): Promise<void> {
        await this.unbanUserRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateCredentialsRaw(requestParameters: UpdateCredentialsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCredentials.');
        }

        if (requestParameters.userCredentialsUpdate === null || requestParameters.userCredentialsUpdate === undefined) {
            throw new runtime.RequiredError('userCredentialsUpdate','Required parameter requestParameters.userCredentialsUpdate was null or undefined when calling updateCredentials.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/{id}/credentials`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserCredentialsUpdateToJSON(requestParameters.userCredentialsUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateCredentials(requestParameters: UpdateCredentialsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateCredentialsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateRoleRaw(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRole.');
        }

        if (requestParameters.userRoleUpdate === null || requestParameters.userRoleUpdate === undefined) {
            throw new runtime.RequiredError('userRoleUpdate','Required parameter requestParameters.userRoleUpdate was null or undefined when calling updateRole.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/user/{id}/editrole`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserRoleUpdateToJSON(requestParameters.userRoleUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateRole(requestParameters: UpdateRoleRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateRoleRaw(requestParameters, initOverrides);
    }

}
