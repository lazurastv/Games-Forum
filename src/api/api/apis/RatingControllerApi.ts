/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RatingAdd,
    RatingAddFromJSON,
    RatingAddToJSON,
    RatingUpdate,
    RatingUpdateFromJSON,
    RatingUpdateToJSON,
    RatingVM,
    RatingVMFromJSON,
    RatingVMToJSON,
} from '../models';

export interface AddRatingRequest {
    ratingAdd: RatingAdd;
}

export interface DeleteRatingRequest {
    id: number;
}

export interface GetRatingByGameIdRequest {
    id: number;
}

export interface GetRatingByIdRequest {
    id: number;
}

export interface GetRatingByUserIdRequest {
    id: number;
}

export interface UpdateRatingRequest {
    id: number;
    ratingUpdate: RatingUpdate;
}

/**
 * 
 */
export class RatingControllerApi extends runtime.BaseAPI {

    /**
     */
    async addRatingRaw(requestParameters: AddRatingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ratingAdd === null || requestParameters.ratingAdd === undefined) {
            throw new runtime.RequiredError('ratingAdd','Required parameter requestParameters.ratingAdd was null or undefined when calling addRating.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rating`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RatingAddToJSON(requestParameters.ratingAdd),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addRating(requestParameters: AddRatingRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addRatingRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteRatingRaw(requestParameters: DeleteRatingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRating.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rating/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteRating(requestParameters: DeleteRatingRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRatingRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllRatingsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RatingVM>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rating`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingVMFromJSON));
    }

    /**
     */
    async getAllRatings(initOverrides?: RequestInit): Promise<Array<RatingVM>> {
        const response = await this.getAllRatingsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getRatingByGameIdRaw(requestParameters: GetRatingByGameIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RatingVM>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRatingByGameId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rating/GameId/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingVMFromJSON));
    }

    /**
     */
    async getRatingByGameId(requestParameters: GetRatingByGameIdRequest, initOverrides?: RequestInit): Promise<Array<RatingVM>> {
        const response = await this.getRatingByGameIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRatingByIdRaw(requestParameters: GetRatingByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RatingVM>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRatingById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rating/Id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RatingVMFromJSON(jsonValue));
    }

    /**
     */
    async getRatingById(requestParameters: GetRatingByIdRequest, initOverrides?: RequestInit): Promise<RatingVM> {
        const response = await this.getRatingByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRatingByUserIdRaw(requestParameters: GetRatingByUserIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RatingVM>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRatingByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/rating/UserId/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RatingVMFromJSON));
    }

    /**
     */
    async getRatingByUserId(requestParameters: GetRatingByUserIdRequest, initOverrides?: RequestInit): Promise<Array<RatingVM>> {
        const response = await this.getRatingByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRatingRaw(requestParameters: UpdateRatingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRating.');
        }

        if (requestParameters.ratingUpdate === null || requestParameters.ratingUpdate === undefined) {
            throw new runtime.RequiredError('ratingUpdate','Required parameter requestParameters.ratingUpdate was null or undefined when calling updateRating.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/rating/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RatingUpdateToJSON(requestParameters.ratingUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateRating(requestParameters: UpdateRatingRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateRatingRaw(requestParameters, initOverrides);
    }

}
