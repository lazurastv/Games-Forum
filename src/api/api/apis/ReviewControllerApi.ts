/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReviewAdd,
    ReviewAddFromJSON,
    ReviewAddToJSON,
    ReviewFullInfoVM,
    ReviewFullInfoVMFromJSON,
    ReviewFullInfoVMToJSON,
    ReviewSearchInfoVM,
    ReviewSearchInfoVMFromJSON,
    ReviewSearchInfoVMToJSON,
    ReviewUpdate,
    ReviewUpdateFromJSON,
    ReviewUpdateToJSON,
    ReviewVM,
    ReviewVMFromJSON,
    ReviewVMToJSON,
} from '../models';

export interface AddReviewRequest {
    reviewAdd: ReviewAdd;
}

export interface AddReviewWithImagesRequest {
    reviewId: number;
    content: string;
    files?: Array<Blob>;
}

export interface DeleteReviewRequest {
    reviewId: number;
}

export interface GetReviewRequest {
    reviewId: number;
}

export interface GetReviewFullInfoRequest {
    reviewId: number;
}

export interface GetSimilarReviewsRequest {
    reviewId: number;
}

export interface UpdateReviewRequest {
    reviewId: number;
    reviewUpdate: ReviewUpdate;
}

/**
 * 
 */
export class ReviewControllerApi extends runtime.BaseAPI {

    /**
     */
    async addReviewRaw(requestParameters: AddReviewRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.reviewAdd === null || requestParameters.reviewAdd === undefined) {
            throw new runtime.RequiredError('reviewAdd','Required parameter requestParameters.reviewAdd was null or undefined when calling addReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/review`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewAddToJSON(requestParameters.reviewAdd),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async addReview(requestParameters: AddReviewRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.addReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addReviewWithImagesRaw(requestParameters: AddReviewWithImagesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling addReviewWithImages.');
        }

        if (requestParameters.content === null || requestParameters.content === undefined) {
            throw new runtime.RequiredError('content','Required parameter requestParameters.content was null or undefined when calling addReviewWithImages.');
        }

        const queryParameters: any = {};

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.files) {
            queryParameters['files'] = requestParameters.files;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review/upload-content-and-images/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addReviewWithImages(requestParameters: AddReviewWithImagesRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addReviewWithImagesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteReviewRaw(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling deleteReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteReview(requestParameters: DeleteReviewRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteReviewRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllReviewSearchInfosRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ReviewSearchInfoVM>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review/SearchInfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewSearchInfoVMFromJSON));
    }

    /**
     */
    async getAllReviewSearchInfos(initOverrides?: RequestInit): Promise<Array<ReviewSearchInfoVM>> {
        const response = await this.getAllReviewSearchInfosRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllReviewsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ReviewVM>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewVMFromJSON));
    }

    /**
     */
    async getAllReviews(initOverrides?: RequestInit): Promise<Array<ReviewVM>> {
        const response = await this.getAllReviewsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getReviewRaw(requestParameters: GetReviewRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReviewVM>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling getReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewVMFromJSON(jsonValue));
    }

    /**
     */
    async getReview(requestParameters: GetReviewRequest, initOverrides?: RequestInit): Promise<ReviewVM> {
        const response = await this.getReviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getReviewFullInfoRaw(requestParameters: GetReviewFullInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ReviewFullInfoVM>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling getReviewFullInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review/FullInfo/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewFullInfoVMFromJSON(jsonValue));
    }

    /**
     */
    async getReviewFullInfo(requestParameters: GetReviewFullInfoRequest, initOverrides?: RequestInit): Promise<ReviewFullInfoVM> {
        const response = await this.getReviewFullInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSimilarReviewsRaw(requestParameters: GetSimilarReviewsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ReviewSearchInfoVM>>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling getSimilarReviews.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/review/Similar/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewSearchInfoVMFromJSON));
    }

    /**
     */
    async getSimilarReviews(requestParameters: GetSimilarReviewsRequest, initOverrides?: RequestInit): Promise<Array<ReviewSearchInfoVM>> {
        const response = await this.getSimilarReviewsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateReviewRaw(requestParameters: UpdateReviewRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reviewId === null || requestParameters.reviewId === undefined) {
            throw new runtime.RequiredError('reviewId','Required parameter requestParameters.reviewId was null or undefined when calling updateReview.');
        }

        if (requestParameters.reviewUpdate === null || requestParameters.reviewUpdate === undefined) {
            throw new runtime.RequiredError('reviewUpdate','Required parameter requestParameters.reviewUpdate was null or undefined when calling updateReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/review/{reviewId}`.replace(`{${"reviewId"}}`, encodeURIComponent(String(requestParameters.reviewId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewUpdateToJSON(requestParameters.reviewUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateReview(requestParameters: UpdateReviewRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateReviewRaw(requestParameters, initOverrides);
    }

}
