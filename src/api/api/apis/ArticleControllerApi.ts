/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ArticleAddUpdate,
    ArticleAddUpdateFromJSON,
    ArticleAddUpdateToJSON,
    ArticleFullInfoVM,
    ArticleFullInfoVMFromJSON,
    ArticleFullInfoVMToJSON,
    ArticleSearchInfoVM,
    ArticleSearchInfoVMFromJSON,
    ArticleSearchInfoVMToJSON,
    ArticleVM,
    ArticleVMFromJSON,
    ArticleVMToJSON,
} from '../models';

export interface AddArticleRequest {
    articleAddUpdate: ArticleAddUpdate;
}

export interface AddArticleWithImagesRequest {
    articleId: number;
    content: string;
    files?: Array<Blob>;
}

export interface DeleteArticleRequest {
    articleId: number;
}

export interface GetArticleRequest {
    articleId: number;
}

export interface GetArticleFullInfoRequest {
    articleId: number;
}

export interface GetSimilarArticlesRequest {
    articleId: number;
}

export interface UpdateArticleRequest {
    articleId: number;
    articleAddUpdate: ArticleAddUpdate;
}

/**
 * 
 */
export class ArticleControllerApi extends runtime.BaseAPI {

    /**
     */
    async addArticleRaw(requestParameters: AddArticleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.articleAddUpdate === null || requestParameters.articleAddUpdate === undefined) {
            throw new runtime.RequiredError('articleAddUpdate','Required parameter requestParameters.articleAddUpdate was null or undefined when calling addArticle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/article`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleAddUpdateToJSON(requestParameters.articleAddUpdate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async addArticle(requestParameters: AddArticleRequest, initOverrides?: RequestInit): Promise<number> {
        const response = await this.addArticleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addArticleWithImagesRaw(requestParameters: AddArticleWithImagesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling addArticleWithImages.');
        }

        if (requestParameters.content === null || requestParameters.content === undefined) {
            throw new runtime.RequiredError('content','Required parameter requestParameters.content was null or undefined when calling addArticleWithImages.');
        }

        const queryParameters: any = {};

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.files) {
            queryParameters['files'] = requestParameters.files;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/article/upload-content-and-images/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addArticleWithImages(requestParameters: AddArticleWithImagesRequest, initOverrides?: RequestInit): Promise<void> {
        await this.addArticleWithImagesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteArticleRaw(requestParameters: DeleteArticleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling deleteArticle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/article/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteArticle(requestParameters: DeleteArticleRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteArticleRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllArticlesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ArticleVM>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/article`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleVMFromJSON));
    }

    /**
     */
    async getAllArticles(initOverrides?: RequestInit): Promise<Array<ArticleVM>> {
        const response = await this.getAllArticlesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllArticlesSearchInfosRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ArticleSearchInfoVM>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/article/SearchInfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleSearchInfoVMFromJSON));
    }

    /**
     */
    async getAllArticlesSearchInfos(initOverrides?: RequestInit): Promise<Array<ArticleSearchInfoVM>> {
        const response = await this.getAllArticlesSearchInfosRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getArticleRaw(requestParameters: GetArticleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArticleVM>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling getArticle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/article/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleVMFromJSON(jsonValue));
    }

    /**
     */
    async getArticle(requestParameters: GetArticleRequest, initOverrides?: RequestInit): Promise<ArticleVM> {
        const response = await this.getArticleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getArticleFullInfoRaw(requestParameters: GetArticleFullInfoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ArticleFullInfoVM>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling getArticleFullInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/article/FullInfo/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFullInfoVMFromJSON(jsonValue));
    }

    /**
     */
    async getArticleFullInfo(requestParameters: GetArticleFullInfoRequest, initOverrides?: RequestInit): Promise<ArticleFullInfoVM> {
        const response = await this.getArticleFullInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getSimilarArticlesRaw(requestParameters: GetSimilarArticlesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ArticleSearchInfoVM>>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling getSimilarArticles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/article/Similar/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleSearchInfoVMFromJSON));
    }

    /**
     */
    async getSimilarArticles(requestParameters: GetSimilarArticlesRequest, initOverrides?: RequestInit): Promise<Array<ArticleSearchInfoVM>> {
        const response = await this.getSimilarArticlesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateArticleRaw(requestParameters: UpdateArticleRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.articleId === null || requestParameters.articleId === undefined) {
            throw new runtime.RequiredError('articleId','Required parameter requestParameters.articleId was null or undefined when calling updateArticle.');
        }

        if (requestParameters.articleAddUpdate === null || requestParameters.articleAddUpdate === undefined) {
            throw new runtime.RequiredError('articleAddUpdate','Required parameter requestParameters.articleAddUpdate was null or undefined when calling updateArticle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/article/{articleId}`.replace(`{${"articleId"}}`, encodeURIComponent(String(requestParameters.articleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleAddUpdateToJSON(requestParameters.articleAddUpdate),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateArticle(requestParameters: UpdateArticleRequest, initOverrides?: RequestInit): Promise<void> {
        await this.updateArticleRaw(requestParameters, initOverrides);
    }

}
