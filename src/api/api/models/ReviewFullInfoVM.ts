/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AuthorVM,
    AuthorVMFromJSON,
    AuthorVMFromJSONTyped,
    AuthorVMToJSON,
} from './AuthorVM';
import {
    CommentVM,
    CommentVMFromJSON,
    CommentVMFromJSONTyped,
    CommentVMToJSON,
} from './CommentVM';
import {
    GameVM,
    GameVMFromJSON,
    GameVMFromJSONTyped,
    GameVMToJSON,
} from './GameVM';

/**
 * 
 * @export
 * @interface ReviewFullInfoVM
 */
export interface ReviewFullInfoVM {
    /**
     * 
     * @type {number}
     * @memberof ReviewFullInfoVM
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ReviewFullInfoVM
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ReviewFullInfoVM
     */
    introduction?: string;
    /**
     * 
     * @type {string}
     * @memberof ReviewFullInfoVM
     */
    path?: string;
    /**
     * 
     * @type {Date}
     * @memberof ReviewFullInfoVM
     */
    publishDate?: Date;
    /**
     * 
     * @type {AuthorVM}
     * @memberof ReviewFullInfoVM
     */
    author?: AuthorVM;
    /**
     * 
     * @type {number}
     * @memberof ReviewFullInfoVM
     */
    likes?: number;
    /**
     * 
     * @type {number}
     * @memberof ReviewFullInfoVM
     */
    dislikes?: number;
    /**
     * 
     * @type {Array<CommentVM>}
     * @memberof ReviewFullInfoVM
     */
    comments?: Array<CommentVM>;
    /**
     * 
     * @type {number}
     * @memberof ReviewFullInfoVM
     */
    score?: number;
    /**
     * 
     * @type {GameVM}
     * @memberof ReviewFullInfoVM
     */
    game?: GameVM;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReviewFullInfoVM
     */
    pluses?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReviewFullInfoVM
     */
    minuses?: Array<string>;
}

export function ReviewFullInfoVMFromJSON(json: any): ReviewFullInfoVM {
    return ReviewFullInfoVMFromJSONTyped(json, false);
}

export function ReviewFullInfoVMFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReviewFullInfoVM {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'introduction': !exists(json, 'introduction') ? undefined : json['introduction'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'publishDate': !exists(json, 'publishDate') ? undefined : (new Date(json['publishDate'])),
        'author': !exists(json, 'author') ? undefined : AuthorVMFromJSON(json['author']),
        'likes': !exists(json, 'likes') ? undefined : json['likes'],
        'dislikes': !exists(json, 'dislikes') ? undefined : json['dislikes'],
        'comments': !exists(json, 'comments') ? undefined : ((json['comments'] as Array<any>).map(CommentVMFromJSON)),
        'score': !exists(json, 'score') ? undefined : json['score'],
        'game': !exists(json, 'game') ? undefined : GameVMFromJSON(json['game']),
        'pluses': !exists(json, 'pluses') ? undefined : json['pluses'],
        'minuses': !exists(json, 'minuses') ? undefined : json['minuses'],
    };
}

export function ReviewFullInfoVMToJSON(value?: ReviewFullInfoVM | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'introduction': value.introduction,
        'path': value.path,
        'publishDate': value.publishDate === undefined ? undefined : (value.publishDate.toISOString()),
        'author': AuthorVMToJSON(value.author),
        'likes': value.likes,
        'dislikes': value.dislikes,
        'comments': value.comments === undefined ? undefined : ((value.comments as Array<any>).map(CommentVMToJSON)),
        'score': value.score,
        'game': GameVMToJSON(value.game),
        'pluses': value.pluses,
        'minuses': value.minuses,
    };
}

